---
---
const fuzzysort = require('fuzzysort')

const HIGH_MATCH_BOUNDARY = -5;
const LOW_MATCH_BOUNDARY = -500;

var searchInputElems;
var sections;


function search() {
    sections['blogs-list'].innerHTML = getBlogsSectionHTML(getBlogsList());
}

function assignInputElements() {
    searchInputElems = {
        'tags': document.getElementById('tags'),
        'name': document.getElementById('name'),
    };
}
function assignSectionElements() {
    sections = {
        'blogs-list': document.getElementById('blogs-list'),
    }
}
function clearFields() {
    searchInputElems['tags'].value = '';
    searchInputElems['name'].value = '';
    sections['blogs-list'].innerHTML = '';
}
function clearSubjects() {
    sections['subjects-list'].innerHTML = '';
}
function isIncludes(noteVal, userVal) {
    if (userVal == null || userVal == '') {
        return true;
    }
    return userVal.includes(noteVal);
}
function getFuzzyMatchScore(noteVal, userVal) {
    if (userVal == null || userVal === '') {
        return 0;
    }
    var results = fuzzysort.go(userVal, noteVal.split('|'));
    return (results.length == 0 
        ? Number.NEGATIVE_INFINITY : results[0]['score']);
}

function getNoteHTML(note, id, sem, subj, year, lec) {
    return '<div><a style="color:inherit;"' + 
        'href="' + getDriveUrl(note['id']) + '" class="default-btn">' +
        'Sem: ' + note['semester'] + 
        '<hr>Subj: ' + note['subjectTitle'] + 
        '<hr>Year: ' + note['year'] +
        '<hr>Lec: ' + note['lecturerTitle'] + '</a></div>';
}
function getNotesGroups(notesList) {
    var notesGroups = {'highMatch': '', 'medMatch': '', 'lowMatch': ''};
    notesList.sort(function(first, second) { return second[0] - first[0]; });
    notesList.forEach(function(item, index, array) {
        if (item[0] >= HIGH_MATCH_BOUNDARY) {
            notesGroups['highMatch'] += item[1];
        } else if (item[0] > LOW_MATCH_BOUNDARY) {
            notesGroups['medMatch'] += item[1];
        } else {
            notesGroups['lowMatch'] += item[1];
        }
    })
    return notesGroups;
}
function getBlogsSectionHTML(notesList) {
    var blogsSectionHTML = '';
    var notesGroups = getNotesGroups(notesList);
    if ((notesGroups['medMatch'] + notesGroups['lowMatch']).length !== 0) {
        blogsSectionHTML =
            '<hr><h2>High-matching Notes</h2>' + notesGroups['highMatch'] +
            '<hr><h2>Medium-matching Notes</h2>' + notesGroups['medMatch'] + 
            '<hr><h2>Low-matching Notes</h2>' + notesGroups['lowMatch'];
    } else {
        blogsSectionHTML = notesGroups['highMatch'] + notesGroups['medMatch']
            + notesGroups['lowMatch'];
    }
    return blogsSectionHTML;
}

function isNoteMatching(note) {
    console.assert(note['semester'].length === 1);
    return isIncludes(note['semester'], searchInputElems['semester'].value) &&
           isIncludes(note['year'], searchInputElems['year'].value) &&
           isIncludes(searchInputElems['lecturer'].value, note['lecturer']);
}
function getBlogsList() {
    var list = [];
    {% for note in site.data.autoGenerated.notesList %}
        if (isNoteMatching({{ note | jsonify }})) {
            list.push([
              getFuzzyMatchScore('{{ note.subject }})', 
                  searchInputElems['subject'].value),
              getNoteHTML({{ note | jsonify }})]);
        } 
    {% endfor %}
    return list;
}

function showNotes(subject) {
    searchInputElems['subject'].value = subject;
    search();
}       

